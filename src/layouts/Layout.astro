---
import '../styles/global.css';

export interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en" class="dark">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Transform your mixes into label-ready tracks with our AI-powered analysis and proven mixing techniques. Join Pulse Academy today." />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/x-icon" href="/favicon.ico" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<slot name="head" />
		
		<!-- Critical Resource Preloading -->
		<link rel="preload" href="/logo.png" as="image" type="image/png">
		<link rel="preload" href="/label-logos/warner music.webp" as="image" type="image/webp">
		<link rel="preload" href="/label-logos/atlantic logo.webp" as="image" type="image/webp">
		<link rel="preload" href="/label-logos/monstercat logo.webp" as="image" type="image/webp">
		
		<!-- DNS Prefetch for external resources -->
		<link rel="dns-prefetch" href="//files.catbox.moe">
		<link rel="dns-prefetch" href="//fast.wistia.com">
    <!-- Critical CSS inlined for performance -->
    <style>
      html{scroll-behavior:smooth}::-webkit-scrollbar{width:6px}::-webkit-scrollbar-track{background:#050507}::-webkit-scrollbar-thumb{background:#6d28d9;border-radius:3px}::-webkit-scrollbar-thumb:hover{background:#8b5cf6}body{font-family:'Inter',sans-serif}@supports (font-variation-settings:normal){body{font-family:'Inter var',sans-serif}}
      
      /* Critical above-the-fold styles */
      .hero-gradient{background:linear-gradient(135deg,#6d28d9,#8b5cf6,#22d3ee)}
      .text-pulse-purple{color:#8b5cf6}
      .text-pulse-cyan{color:#22d3ee}
      .bg-gradient-to-b{background-image:linear-gradient(to bottom,var(--tw-gradient-stops))}
      .from-\\[\\#050507\\]{--tw-gradient-from:#050507;--tw-gradient-to:rgb(5 5 7 / 0);--tw-gradient-stops:var(--tw-gradient-from),var(--tw-gradient-to)}
      .to-\\[\\#0a0a15\\]{--tw-gradient-to:#0a0a15}
    </style>
    <link rel="preconnect" href="https://rsms.me" crossorigin>
    <link rel="stylesheet" href="https://rsms.me/inter/inter.css" media="print" onload="this.media='all'">
    <noscript><link rel="stylesheet" href="https://rsms.me/inter/inter.css"></noscript>
	</head>
	<body class="bg-gradient-to-b from-[#050507] to-[#0a0a15] text-gray-300 selection:bg-pulse-purple selection:text-white">
		<slot />
    <!-- Floating CTA for mobile - Hidden by default, shows on scroll -->
    <div id="floating-cta-mobile" class="md:hidden fixed bottom-4 right-4 z-50 opacity-0 translate-y-20 transition-all duration-300 pointer-events-none">
      <a href="#offer-section" class="btn-lg rounded-full shadow-cta-glow flex items-center justify-center p-4">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-6 h-6 text-white">
          <path stroke-linecap="round" stroke-linejoin="round" d="M9 9l10.5-3m0 6.553v3.75a2.25 2.25 0 01-1.632 2.163l-1.32.377a1.803 1.803 0 11-.99-3.467l2.31-.66a2.25 2.25 0 001.632-2.163zm0 0V2.25L9 5.25v10.303m0 0v3.75a2.25 2.25 0 01-1.632 2.163l-1.32.377a1.803 1.803 0 01-.99-3.467l2.31-.66A2.25 2.25 0 009 15.553z" />
        </svg>
      </a>
    </div>

    <!-- Aggressive Exit-Intent Modal (Global) -->
    <div id="global-exit-intent-modal" class="fixed inset-0 flex items-center justify-center p-4 z-[110] hidden transition-opacity duration-300 opacity-0">
      <div class="fixed inset-0 bg-black/80 backdrop-blur-md z-[-1]"></div>
      <div class="glassmorphism p-6 md:p-8 rounded-xl max-w-lg w-full text-center relative shadow-2xl">
        <button id="close-global-exit-intent" class="absolute top-3 right-3 text-gray-400 hover:text-white transition-colors">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-8 h-8">
            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
        
        <h3 class="text-2xl md:text-3xl font-semibold text-transparent bg-clip-text bg-gradient-to-r from-pulse-purple to-pulse-cyan mb-4 pb-1 leading-normal">Wait! Don't Give Up on Your Music</h3>
        
        <p class="text-gray-300 mb-4 text-lg">
          <strong>You're 30 minutes away</strong> from knowing exactly what's holding your tracks back.
        </p>
        
        <!-- Quick testimonial -->
        <div class="bg-[#080810]/60 p-4 rounded-lg border border-pulse-purple/20 mb-6 text-left">
          <p class="text-sm text-gray-300 mb-2">
            "I've been producing for 4 years and this one session taught me more than all my courses combined. Finally understand why my tracks sounded amateur."
          </p>
          <div class="flex items-center justify-between">
            <span class="text-xs text-gray-400">Marcus T., Electronic Producer</span>
            <div class="flex">
              <span class="text-yellow-400">★★★★★</span>
            </div>
          </div>
        </div>
        
        <!-- Urgency reminder -->
        <div class="bg-red-500/10 border border-red-500/20 rounded-lg p-3 mb-6">
          <p class="text-red-400 font-semibold text-sm">⚠️ Only <span id="global-exit-intent-spots" class="text-red-400 font-semibold">- spots left as of loading...</span></p>
          <p class="text-gray-300 text-xs">Don't wait, these fill up fast</p>
        </div>
        
        <p class="text-gray-300 mb-6">
          <strong>$935 value. Completely free.</strong><br/>
          Pure insights for your music. Zero sales pressure.
        </p>
        
        <div class="shadow-cta-glow rounded-xl">
          <button id="global-exit-modal-cta" 
                  class="w-full button-pop text-lg bg-pulse-accent text-gray-900 hover:bg-pulse-accent-dark px-8 py-4 rounded-xl font-bold transition-all duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-pulse-accent/50">
            YES, ANALYZE MY TRACK FOR FREE
          </button>
        </div>
        
        <p class="mt-3 text-xs text-gray-400">
          Takes 2 minutes to book. 30 minutes to transform your music.
        </p>
      </div>
    </div>
    <script src="/src/utils/spotsManager.js"></script>
    <script>
      // Page load tracking for exit intent
      (window as any).pageLoadTime = Date.now();
      
      // Unified CTA Button Handler - Ensures ALL buttons work
      document.addEventListener('DOMContentLoaded', () => {
        // Function to open the calendar modal or redirect on mobile
        const openCalendarModal = () => {
          // Check if mobile device
          const isMobile = window.innerWidth <= 768 || /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
          
          if (isMobile) {
            // Redirect mobile users to dedicated booking page
            window.location.href = '/book';
            return;
          }
          
          // Desktop: Use modal
          // Hide exit intent first if open
          const exitModal = document.getElementById('global-exit-intent-modal');
          if (exitModal && !exitModal.classList.contains('hidden')) {
            exitModal.classList.remove('opacity-100');
            setTimeout(() => exitModal.classList.add('hidden'), 300);
          }
          
          const calendarModal = document.getElementById('calendar-modal');
          if (calendarModal) {
            calendarModal.classList.remove('hidden');
            setTimeout(() => calendarModal.classList.add('opacity-100'), 10);
            
            // Load GHL iframe if not already loaded - with delay for mobile
            const iframe = document.getElementById('ghl-iframe') as HTMLIFrameElement;
            if (iframe && !iframe.src) {
              console.log('Loading GHL iframe...');
              // Add delay to ensure GHL script is fully loaded, especially on mobile
              setTimeout(() => {
                iframe.src = 'https://api.leadconnectorhq.com/widget/survey/6RBmf85SJ0IFIO51kKfd';
                iframe.id = '6RBmf85SJ0IFIO51kKfd';
              }, 500); // 500ms delay for mobile compatibility
            }
          } else {
            console.warn('Calendar modal not found on this page');
          }
        };

        // List of all button IDs that should open the modal
        const ctaButtonIds = [
          'hero-cta-button',
          'header-cta-button', 
          'open-calendar-modal-offer',
          'cta-button-main',
          'final-cta-main',
          'final-cta-button-main', // Add the final CTA button
          'global-exit-modal-cta' // Add the global exit intent CTA
        ];

        // Attach click handlers to all CTA buttons
        ctaButtonIds.forEach(buttonId => {
          const button = document.getElementById(buttonId);
          if (button) {
            button.addEventListener('click', (e) => {
              e.preventDefault();
              openCalendarModal();
            });
          }
        });

        // Handle inline onclick buttons (like in blog posts)
        document.addEventListener('click', (e) => {
          const target = e.target as HTMLElement;
          if (target && target.matches && (target.matches('.btn-lg') || target.matches('[onclick*="calendar-modal"]'))) {
            // Prevent default action for inline onclick handlers
            const elementWithOnclick = target as any;
            if (elementWithOnclick.onclick) {
              e.preventDefault();
              openCalendarModal();
            }
          }
        });

        // Handle close modal functionality
        const closeModal = () => {
          const calendarModal = document.getElementById('calendar-modal');
          if (calendarModal) {
            calendarModal.classList.remove('opacity-100');
            setTimeout(() => calendarModal.classList.add('hidden'), 300);
          }
        };

        // Close button handler
        const closeButton = document.getElementById('close-calendar-modal');
        if (closeButton) {
          closeButton.addEventListener('click', closeModal);
        }

        // ESC key handler for main modal
        window.addEventListener('keydown', (e) => {
          if (e.key === 'Escape') {
            closeModal();
            // Also close exit intent if open
            const exitModal = document.getElementById('global-exit-intent-modal');
            if (exitModal && !exitModal.classList.contains('hidden')) {
              exitModal.classList.remove('opacity-100');
              setTimeout(() => exitModal.classList.add('hidden'), 300);
              sessionStorage.setItem('globalExitIntentShown', 'true');
            }
          }
        });

        // Click outside modal handler
        const modal = document.getElementById('calendar-modal');
        if (modal) {
          modal.addEventListener('click', (e) => {
            if (e.target === modal) {
              closeModal();
            }
          });
        }

        // AGGRESSIVE EXIT INTENT SYSTEM
        const exitIntentModal = document.getElementById('global-exit-intent-modal');
        const closeExitIntentBtn = document.getElementById('close-global-exit-intent');
        let exitIntentShown = false;
        
        // Check if already shown this session
        if (sessionStorage.getItem('globalExitIntentShown')) {
          exitIntentShown = true;
        }

        // Close exit intent modal handler
        if (closeExitIntentBtn && exitIntentModal) {
          closeExitIntentBtn.addEventListener('click', () => {
            exitIntentModal.classList.remove('opacity-100');
            setTimeout(() => exitIntentModal.classList.add('hidden'), 300);
            sessionStorage.setItem('globalExitIntentShown', 'true');
            exitIntentShown = true;
          });
        }

        // Click outside exit modal handler
        if (exitIntentModal) {
          exitIntentModal.addEventListener('click', (e) => {
            if (e.target === exitIntentModal) {
              exitIntentModal.classList.remove('opacity-100');
              setTimeout(() => exitIntentModal.classList.add('hidden'), 300);
              sessionStorage.setItem('globalExitIntentShown', 'true');
              exitIntentShown = true;
            }
          });
        }

        // AGGRESSIVE mouse leave detection - triggers immediately on ANY exit attempt
        document.addEventListener('mouseleave', () => {
          if (!exitIntentShown && exitIntentModal && exitIntentModal.classList.contains('hidden')) {
            const calendarModal = document.getElementById('calendar-modal');
            const calendarIsOpen = calendarModal && !calendarModal.classList.contains('hidden');
            const timeOnPage = (Date.now() - (window as any).pageLoadTime) / 1000;
            
            // Very aggressive - only require 5 seconds on page, no calendar check, immediate trigger
            if (!calendarIsOpen && timeOnPage >= 5) {
              exitIntentModal.classList.remove('hidden');
              setTimeout(() => exitIntentModal.classList.add('opacity-100'), 10);
              exitIntentShown = true;
              // Update spots count
              if ((window as any).spotsManager) {
                (window as any).spotsManager.updateSpotsWithDate('global-exit-intent-spots');
              }
            }
          }
        });

        // Additional trigger on scroll up quickly (mobile exit intent alternative)
        let lastScrollTop = 0;
        window.addEventListener('scroll', () => {
          const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
          
          // If user scrolls up quickly by more than 100px, treat as exit intent
          if (scrollTop < lastScrollTop - 100 && !exitIntentShown && exitIntentModal && exitIntentModal.classList.contains('hidden')) {
            const calendarModal = document.getElementById('calendar-modal');
            const calendarIsOpen = calendarModal && !calendarModal.classList.contains('hidden');
            const timeOnPage = (Date.now() - (window as any).pageLoadTime) / 1000;
            
            if (!calendarIsOpen && timeOnPage >= 5) {
              exitIntentModal.classList.remove('hidden');
              setTimeout(() => exitIntentModal.classList.add('opacity-100'), 10);
              exitIntentShown = true;
              if ((window as any).spotsManager) {
                (window as any).spotsManager.updateSpotsWithDate('global-exit-intent-spots');
              }
            }
          }
          lastScrollTop = scrollTop;
        });

        // Initialize spots count for exit intent
        if ((window as any).spotsManager) {
          (window as any).spotsManager.updateSpotsWithDate('global-exit-intent-spots');
        }

        // Floating CTA button - show on scroll
        const floatingCta = document.getElementById('floating-cta-mobile');
        let hasScrolled = false;
        
        if (floatingCta) {
          window.addEventListener('scroll', () => {
            const scrollPosition = window.scrollY;
            
            if (scrollPosition > 200 && !hasScrolled) {
              // Show floating CTA after scrolling 200px
              floatingCta.classList.remove('opacity-0', 'translate-y-20', 'pointer-events-none');
              floatingCta.classList.add('opacity-100', 'translate-y-0', 'pointer-events-auto');
              hasScrolled = true;
            } else if (scrollPosition <= 200 && hasScrolled) {
              // Hide when back at top
              floatingCta.classList.add('opacity-0', 'translate-y-20', 'pointer-events-none');
              floatingCta.classList.remove('opacity-100', 'translate-y-0', 'pointer-events-auto');
              hasScrolled = false;
            }
          });
        }
      });

      // Optimized animation observer with requestIdleCallback
      document.addEventListener('DOMContentLoaded', () => {
        const initAnimations = () => {
          const animatedElements = document.querySelectorAll('[data-animate]');
          if (!animatedElements.length) return;
        
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              const element = entry.target;
              const delay = parseInt(element.getAttribute('data-delay') || '0', 10);
              
                if (delay > 0) {
                  setTimeout(() => element.classList.add('animate'), delay);
                } else {
                element.classList.add('animate');
                }
              observer.unobserve(element);
            }
          });
          }, { threshold: 0.1, rootMargin: '50px' });
          
          animatedElements.forEach(element => observer.observe(element));
        };
        
        // Use requestIdleCallback if available, otherwise fallback
        if ('requestIdleCallback' in window) {
          requestIdleCallback(initAnimations);
        } else {
          setTimeout(initAnimations, 100);
        }

        // Mobile Scroll Effects System - Convert hover effects to scroll animations
        const initMobileScrollEffects = () => {
          const isMobile = window.innerWidth <= 768;
          if (!isMobile) return;

          // Create intersection observer for mobile scroll effects
          const mobileScrollObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
              const element = entry.target as HTMLElement;
              
              if (entry.isIntersecting) {
                // Add mobile scroll effect classes
                element.classList.add('mobile-scroll-active');
                
                // Handle specific element types
                if (element.classList.contains('group')) {
                  // Method steps and cards
                  element.style.transform = 'translateY(-5px) scale(1.02)';
                  element.style.borderColor = 'rgba(139, 92, 246, 0.4)';
                  element.style.boxShadow = '0 10px 25px rgba(139, 92, 246, 0.15)';
                  
                  // Animate icons within
                  const icon = element.querySelector('svg') as SVGElement;
                  if (icon) {
                    icon.style.transform = 'scale(1.1)';
                    icon.style.color = '#8b5cf6';
                  }
                }
                
                // Avatar effects
                if (element.classList.contains('avatar-item')) {
                  element.style.transform = 'translateY(-5px) scale(1.15)';
                  element.style.zIndex = '10';
                }
                
                // Audio player effects
                if (element.classList.contains('audio-box')) {
                  element.style.borderColor = 'rgba(139, 92, 246, 0.4)';
                  element.style.background = 'rgba(0, 0, 0, 0.6)';
                  element.style.transform = 'scale(1.02)';
                }
                
                // Play button effects
                if (element.classList.contains('play-btn')) {
                  element.style.transform = 'scale(1.05)';
                  element.style.boxShadow = '0 6px 20px rgba(139, 92, 246, 0.4)';
                }
                
                // Button hover effects
                if (element.classList.contains('btn-lg') || element.classList.contains('button-pop')) {
                  element.style.transform = 'scale(1.05)';
                  element.style.boxShadow = '0 8px 25px rgba(139, 92, 246, 0.3)';
                }
                
                // Student review avatars
                if (element.classList.contains('student-review-avatar')) {
                  element.style.borderColor = 'rgba(139, 92, 246, 0.8)';
                  element.style.boxShadow = '0 0 15px rgba(139, 92, 246, 0.5)';
                  element.style.transform = 'scale(1.1)';
                }

              } else {
                // Remove mobile scroll effect classes when out of view
                element.classList.remove('mobile-scroll-active');
                
                // Reset styles
                if (element.classList.contains('group')) {
                  element.style.transform = '';
                  element.style.borderColor = '';
                  element.style.boxShadow = '';
                  
                  const icon = element.querySelector('svg') as SVGElement;
                  if (icon) {
                    icon.style.transform = '';
                    icon.style.color = '';
                  }
                }
                
                if (element.classList.contains('avatar-item')) {
                  element.style.transform = '';
                  element.style.zIndex = '';
                }
                
                if (element.classList.contains('audio-box')) {
                  element.style.borderColor = '';
                  element.style.background = '';
                  element.style.transform = '';
                }
                
                if (element.classList.contains('play-btn')) {
                  element.style.transform = '';
                  element.style.boxShadow = '';
                }
                
                if (element.classList.contains('btn-lg') || element.classList.contains('button-pop')) {
                  element.style.transform = '';
                  element.style.boxShadow = '';
                }
                
                if (element.classList.contains('student-review-avatar')) {
                  element.style.borderColor = '';
                  element.style.boxShadow = '';
                  element.style.transform = '';
                }
              }
            });
          }, { 
            threshold: 0.3, // Trigger when 30% visible
            rootMargin: '0px 0px -50px 0px' // Trigger slightly before element is fully visible
          });

          // Observe all interactive elements for mobile scroll effects
          const elementsToObserve = [
            ...document.querySelectorAll('.group'),
            ...document.querySelectorAll('.avatar-item'),
            ...document.querySelectorAll('.audio-box'),
            ...document.querySelectorAll('.play-btn'),
            ...document.querySelectorAll('.btn-lg'),
            ...document.querySelectorAll('.button-pop'),
            ...document.querySelectorAll('.student-review-avatar')
          ];

          elementsToObserve.forEach(element => {
            // Add transition styles for smooth animations
            (element as HTMLElement).style.transition = 'all 0.3s ease';
            mobileScrollObserver.observe(element);
          });
        };

        // Initialize mobile scroll effects
        initMobileScrollEffects();

        // Re-initialize on window resize
        let resizeTimeout;
        window.addEventListener('resize', () => {
          clearTimeout(resizeTimeout);
          resizeTimeout = setTimeout(() => {
            initMobileScrollEffects();
          }, 250);
        });
      });
    </script>
    <script>
      import { injectSpeedInsights } from '@vercel/speed-insights';
      injectSpeedInsights();
    </script>
	</body>
</html> 