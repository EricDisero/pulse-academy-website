---
import '../styles/global.css';

export interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en" class="dark">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Pulse Academy Landing Page" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="icon" type="image/png" sizes="32x32" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>ðŸŽµ</text></svg>" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		
		<!-- Critical Resource Preloading -->
		<link rel="preload" href="/label-logos/warner music.webp" as="image" type="image/webp">
		<link rel="preload" href="/label-logos/atlantic logo.webp" as="image" type="image/webp">
		<link rel="preload" href="/label-logos/monstercat logo.webp" as="image" type="image/webp">
		
		<!-- DNS Prefetch for external resources -->
		<link rel="dns-prefetch" href="//files.catbox.moe">
		<link rel="dns-prefetch" href="//fast.wistia.com">
    <!-- Critical CSS inlined for performance -->
    <style>
      html{scroll-behavior:smooth}::-webkit-scrollbar{width:6px}::-webkit-scrollbar-track{background:#050507}::-webkit-scrollbar-thumb{background:#6d28d9;border-radius:3px}::-webkit-scrollbar-thumb:hover{background:#8b5cf6}body{font-family:'Inter',sans-serif}@supports (font-variation-settings:normal){body{font-family:'Inter var',sans-serif}}
      
      /* Critical above-the-fold styles */
      .hero-gradient{background:linear-gradient(135deg,#6d28d9,#8b5cf6,#22d3ee)}
      .text-pulse-purple{color:#8b5cf6}
      .text-pulse-cyan{color:#22d3ee}
      .bg-gradient-to-b{background-image:linear-gradient(to bottom,var(--tw-gradient-stops))}
      .from-\\[\\#050507\\]{--tw-gradient-from:#050507;--tw-gradient-to:rgb(5 5 7 / 0);--tw-gradient-stops:var(--tw-gradient-from),var(--tw-gradient-to)}
      .to-\\[\\#0a0a15\\]{--tw-gradient-to:#0a0a15}
    </style>
    <link rel="preconnect" href="https://rsms.me" crossorigin>
    <link rel="stylesheet" href="https://rsms.me/inter/inter.css" media="print" onload="this.media='all'">
    <noscript><link rel="stylesheet" href="https://rsms.me/inter/inter.css"></noscript>
	</head>
	<body class="bg-gradient-to-b from-[#050507] to-[#0a0a15] text-gray-300 selection:bg-pulse-purple selection:text-white">
		<slot />
    <!-- Floating CTA for mobile -->
    <div id="floating-cta-mobile" class="md:hidden fixed bottom-4 right-4 z-50">
      <a href="#offer-section" class="btn-lg rounded-full shadow-cta-glow flex items-center justify-center p-4">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-6 h-6 text-white">
          <path stroke-linecap="round" stroke-linejoin="round" d="M9 9l10.5-3m0 6.553v3.75a2.25 2.25 0 01-1.632 2.163l-1.32.377a1.803 1.803 0 11-.99-3.467l2.31-.66a2.25 2.25 0 001.632-2.163zm0 0V2.25L9 5.25v10.303m0 0v3.75a2.25 2.25 0 01-1.632 2.163l-1.32.377a1.803 1.803 0 01-.99-3.467l2.31-.66A2.25 2.25 0 009 15.553z" />
        </svg>
      </a>
    </div>
    <script src="/src/utils/spotsManager.js"></script>
    <script>
      // Optimized animation observer with requestIdleCallback
      document.addEventListener('DOMContentLoaded', () => {
        const initAnimations = () => {
          const animatedElements = document.querySelectorAll('[data-animate]');
          if (!animatedElements.length) return;
          
          const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                const element = entry.target;
                const delay = parseInt(element.getAttribute('data-delay') || '0', 10);
                
                if (delay > 0) {
                  setTimeout(() => element.classList.add('animate'), delay);
                } else {
                  element.classList.add('animate');
                }
                observer.unobserve(element);
              }
            });
          }, { threshold: 0.1, rootMargin: '50px' });
          
          animatedElements.forEach(element => observer.observe(element));
        };
        
        // Use requestIdleCallback if available, otherwise fallback
        if ('requestIdleCallback' in window) {
          requestIdleCallback(initAnimations);
        } else {
          setTimeout(initAnimations, 100);
        }
      });
    </script>
    <script>
      import { injectSpeedInsights } from '@vercel/speed-insights';
      injectSpeedInsights();
    </script>
	</body>
</html> 